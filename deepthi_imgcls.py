# -*- coding: utf-8 -*-
"""Deepthi_ImgCls.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uv6oB9nyT9Tnv4qJr5OVj7lDxbwsVWhX
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing Dataset from Kaggle"""

!kaggle competitions download -c dogs-vs-cats

!ls

from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

#read the dataset and extract all the files present in this dataset

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  #if extracted print this
  print('The dataset is extracted')

#do the same read and extraction for train.zip
from zipfile import ZipFile

dataset = '/content/train.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

import os
# counting the number of files in train folder
path, dirs, files = next(os.walk('/content/train'))
file_count = len(files)
print('Number of images: ', file_count)

"""Printing the names of the images"""

file_names = os.listdir('/content/train')
print(file_names)

"""Importing the dependencies

"""

import numpy as np
#from Pillow lib
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow
#open cv but as an alternative for google colab

"""Displaying Images"""

#display dog image
img=mpimg.imread('/content/train/dog.2908.jpg')
#reads the imgfile
imgplot = plt.imshow(img)
plt.show()

#display cat image
img=mpimg.imread('/content/train/cat.1443.jpg')
#reads the imgfile
imgplot = plt.imshow(img)
plt.show()

"""
# **Resizing The Images**

While training images we have to notice that the dimensions of the Images varies and while training your neural network all the images have to be of same sizes hence as we are using MobileNetV2 and it needs images to be in (224,224)
SO we have to resize the pixels so then the model can read the data and also we can convert this rgb images to greyscale as the grayscale images would be smaller in size and training would be successful within a short period of time
"""

file_names = os.listdir('/content/train/')
#for img_file in file_names
for i in range(5):
#first five range
  name = file_names[i]
  print(name[0:3])
  #just to print the first 3 letters we use splicing

#Calculate how many cat images and dog images are there we initialize a counter variable
file_names = os.listdir('/content/train/')

dog_count = 0
cat_count=0

for img_file in file_names:
  name = img_file[0:3]

  if name == 'dog':
    dog_count += 1

  else:
    cat_count +=1


print('Number of dog images: ',dog_count)
print('Number of cat images: ',cat_count)

#we cannot take all these 25k images we'll just take 2k or 3k images and we only resize those images
#creating a directory for these resized images
os.mkdir('/content/resized images')

original_folder = '/content/train/' #not resized folder
resized_folder = '/content/resized images/' #resized iamges
#including forward slash in the end bcz we are focused on finding the path of the image

for i in range(2000):
#for loop that runs 2000 times and takes name each individual file on each iterations
  filename = os.listdir(original_folder)[i]
  img_path = original_folder+filename
#takes original folder and concatenate the name of the file one by one iterations of range 2k then we resize it

  img = Image.open(img_path)
  #Image.open is a function that we have in PIL(pillow)library
  img= img.resize((224,224))
  img = img.convert('RGB')
#resize and save
  newImgPath = resized_folder+filename
  img.save(newImgPath)

#display resized dog image
img=mpimg.imread('/content/resized images/dog.2908.jpg')
#reads the imgfile
imgplot = plt.imshow(img)
plt.show()

# display resized cat image
img = mpimg.imread('/content/resized images/cat.1443.jpg')
imgplt = plt.imshow(img)
plt.show()

"""# Creating labels for resized images of dogs and cats

cats = 0

dogs = 1
"""

#create a for loop that will iterate through the resized image folder and assign labels
filenames = os.listdir('/content/resized images/')

labels = [] #empty list

for i in range(2000):

  file_name = filenames[i]
  label = file_name[0:3]

  if label == 'dog':
    labels.append(1)
  else:
    labels.append(0)

print(filenames[0:5])
print(len(filenames))

#now for labels
print(labels[0:5])
print(len(labels))

# counting the images of dogs and cats out of 2000 images
# A func in numpy lib which tells how many unique var are there
values, counts = np.unique(labels, return_counts=True)
print(values)
print(counts)

"""# Converting to numpy arrays

we have read all these images and convert them to numpy arrays bcz wkt our models cannot understand images but definitely understand numbers
"""

import cv2 #Open CV lib
import glob

img_dir = '/content/resized images/'
img_extensions = ['png','jpg']

files=[]
#locate the file and '*.' as we have both jpg and png format to check whether file is in jpg or png and convert them to numpy array
[files.extend(glob.glob(img_dir + '*.' +e)) for e in img_extensions]
#similar to appending where we to the files list as we take each file name and reading it through cv.imread Open CV lib and convert it to numpy array
dog_cat_img = np.array([cv2.imread(file) for file in files])

print(dog_cat_img)

type(dog_cat_img) #dtype

print(dog_cat_img.shape)
#no of img,dimensions,3 represents rgm imgs if greyscale gives 1 or ntng

X = dog_cat_img
Y = np.asarray(labels)

#X stores imgs of dogs and cats and their corresponding labels are stored in Y

"""# Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)
#from sklearn 80 train-20 test and The random_state parameter ensures that the same randomization is used each time the code is run, resulting in the same splits of the data.

print(X.shape, X_train.shape, X_test.shape)

"""1600 = training imges

400 = test images
"""

#scaling the data so the values have pixel range of 0 to 255
X_train_scaled = X_train/255

X_test_scaled = X_test/255

print(X_train_scaled)

"""# Building the Neural Network"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import imagenet_utils
from IPython.display import Image

model = tf.keras.applications.MobileNet()

model.summary()

def prepare_image(file):
    img_path = ''
    img = image.load_img(img_path + file, target_size=(224, 224))
    img_array = image.img_to_array(img)
    print(img_array.shape)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    print(img_array_expanded_dims.shape)
    return tf.keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics = ['acc']
)

model.fit(X_train_scaled, Y_train, epochs=5)

score, acc = model.evaluate(X_test_scaled, Y_test)
print('Test Loss =', score)
print('Test Accuracy =', acc)

"""# Predictive System"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')

"""# Saving the Trained Model"""

from google.colab import drive
drive.mount('/content/drive')

import pickle

filename = 'trained_model_dog_cat.sav'
pickle.dump(model, open(filename, 'wb'))

#loading the saved model
loaded_model = pickle.load(open('trained_model_dog_cat.sav', 'rb'))

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = loaded_model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')

from google.colab import files

# Download the file
files.download('trained_model_dog_cat.sav')